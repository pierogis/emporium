generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ware {
  id         Int        @id(map: "Ware_pkey") @default(autoincrement())
  name       String     @unique(map: "Ware_name_unique") @db.VarChar(255)
  models     Model[]
  categories Category[]
}

model Model {
  id      Int      @id(map: "Model_pkey") @default(autoincrement())
  wareId  Int
  ware    Ware     @relation(fields: [wareId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Model_wareId_fkey")
  plate   Plate?
  // park    Park?
  images  Image[]
  scores  Score[]
  reviews Review[]
}

model Category {
  id       Int     @id(map: "Category_pkey") @default(autoincrement())
  name     String  @db.VarChar(255)
  symbol   String  @db.VarChar(255)
  wareName String  @db.VarChar(255)
  ware     Ware    @relation(fields: [wareName], references: [name], onDelete: Cascade, onUpdate: NoAction, map: "Category_wareName_fkey")
  scores   Score[]

  @@unique([name, wareName], map: "Category_name_wareName_unique")
}

model Review {
  id          Int    @id(map: "Review_pkey") @default(autoincrement())
  modelId     Int
  userId      Int
  description String @db.VarChar(2047)
  model       Model  @relation(fields: [modelId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Review_modelId_fkey")
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Review_userId_fkey")

  @@unique([userId, modelId], name: "Review_userId_modelId_unique")
}

model Score {
  modelId    Int
  userId     Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Score_categoryId_fkey")
  value      Int
  model      Model    @relation(fields: [modelId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Score_modelId_fkey")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Score_userId_fkey")

  @@id([modelId, userId, categoryId], map: "Score_pkey")
}

model Image {
  id      Int     @id(map: "Image_pkey") @default(autoincrement())
  modelId Int
  url     String? @unique(map: "Image_url_unique") @db.VarChar(255)
  model   Model   @relation(fields: [modelId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Image_modelId_fkey")
}

model Jurisdiction {
  id           Int     @id(map: "Jurisdiction_pkey") @default(autoincrement())
  abbreviation String  @unique(map: "Jurisdiction_abbreviation_unique") @db.VarChar(2)
  name         String  @db.VarChar(255)
  plates       Plate[]
  // parks        Park[]
}

model Plate {
  modelId        Int          @id(map: "Plate_pkey")
  jurisdictionId Int
  startYear      Int?
  endYear        Int?
  model          Model        @relation(fields: [modelId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Plate_modelId_fkey")
  jurisdiction   Jurisdiction @relation(fields: [jurisdictionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Plate_jurisdictionId_fkey")
}

// model Park {
//   id             Int          @id(map: "Park_pkey") @default(autoincrement())
//   modelId        Int          @unique
//   jurisdictionId Int
//   startYear      Int?
//   jurisdiction   Jurisdiction @relation(fields: [jurisdictionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Park_jurisdictionId_fkey")
//   model          Model        @relation(fields: [modelId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Park_modelId_fkey")
// }

model User {
  id      Int      @id(map: "User_pkey") @default(autoincrement())
  email   String   @unique(map: "User_email_unique") @db.VarChar(255)
  serial  String   @unique(map: "User_serial_unique") @db.VarChar(255)
  isAdmin Boolean  @default(false)
  scores  Score[]
  reviews Review[]
}
